" Setup vim to not write data to disk during editing session and on exit to encrypt buffer with gpg using environment variable GPG_KEY and write data to file specified in environment variable GPG_ENCRYPTED_FILE file on exit
" Borrowed a lot from gnupg.vim. Thanks embear! https://github.com/embear/vim-gnupg/blob/master/plugin/gnupg.vim

function GPGEncryptBuffer()

  " Switch buffer to binary mode
  set bin

  " Get contents of current buffer
  let buffer = join(getline(1, '$'), "\n")

  " Make args of recipients
  let recipients = " --recipient \"" . substitute($GPG_RECIPIENTS, " ", "\" --recipient \"", "g") . "\""
  " gpg encrypt buffer to disk
  echomsg system("gpg " . recipients . " --encrypt > " . shellescape($GPG_ENCRYPTED_FILE), buffer)

  " Quit, without saving buffer to disk
  q!

endfunction


function ConfirmWrite()
  " Cheers Ali https://vi.stackexchange.com/a/34531
  return confirm("Really write contents originating from encrypted source to disk?", "&Yes\n&No", 1, "Warning")
endfunction


" Do not write to ~/.viminfo
set viminfo=

" Don't want a swap file, as it writes unencrypted data to disk
set noswapfile

" Turn off undo file, as it will contain unencrypted data to disk
if has("+undofile")
  set undofile=
endif

" Make arrow keys behave
set nocompatible

" Warn user about saving to disk, and prompt for confirmation
" TODO make this throw a bit nicer, but for now it works, just fugly
autocmd BufWritePre * if ConfirmWrite() > 1 | throw "Write aborted" | endif

" Map so quiting with write encrypts buffer back to disk
cmap x call GPGEncryptBuffer()
cmap wq call GPGEncryptBuffer()
cmap ZZ call GPGEncryptBuffer()
cmap q q!

" Disable default start screen info
set shm+=I
